@page "/days/day11"
@inherits blazorgui.Components.CanvasComponentBase
@using common
@using day11

<BECanvas Width="300" Height="400" @ref="canvasReference"></BECanvas>


@code {

    const double TimePerBlink = 200;
    const double OctoRadi = 45;
    const double OctoPad = 10;
    const double OctoSize = OctoRadi * 2 + OctoPad;
    private const int MaxStep = 196;
    double prevTick = 0;
    int step = 0;

    int[,] prevMatrix;

    DumboOctopuses octos;

    protected override async Task DrawInitialCanvas()
    {
        var lines = Dumbo_Octopuses.CreateLines("day11.sample.txt");
        octos = DumboOctopuses.Create(lines);
        prevMatrix = octos.Matrix;

        await context.SetFillStyleAsync("black");
        await context.FillRectAsync(0, 0, dimensions.Width, dimensions.Height);

        await context.SetFontAsync("16pt sans-serif");

        await context.TranslateAsync(150.5, 150.5);
    }

    [JSInvokable]
    public override async ValueTask Update(double timeStamp)
    {
        var timeSinceLastTick = timeStamp - prevTick;
        var tickDelta = Math.Min(timeSinceLastTick / TimePerBlink, 1);

        if (step < MaxStep)
        {

            if (timeSinceLastTick > TimePerBlink)
            {
                prevMatrix = octos.Matrix;
                prevTick = timeStamp;
                tickDelta = 0;
                step++;

                octos.PassTime();
            }

        }

        var normalAnimDelta = Math.Pow(tickDelta, 3);
        var flashAnimDelta = tickDelta > 0.999 ? 1 : 1 - Math.Pow(2, -10 * tickDelta);
        //var flashAnimDelta = tickDelta < 0.001 ? 0 : Math.Pow(2, 10 * tickDelta - 10);

        await context.SetFillStyleAsync("black");
        await context.FillRectAsync(0, 0, dimensions.Width, dimensions.Height);

        await context.SaveAsync();
        try
        {
            octos.IterateMatrix(async (y, x) =>
            {
                double drawX = x * OctoSize + OctoRadi;
                double drawY = y * OctoSize + OctoRadi;

                double prevEnergy = prevMatrix[y, x];
                double energy = octos.Matrix[y, x];
                if (prevEnergy > 0) prevEnergy *= .5; else prevEnergy = 10;
                if (energy == 0) energy = 10; else energy *= .5;
                var animDelta = energy <= 0.101 ? flashAnimDelta : normalAnimDelta;
                var energyDelta = (energy - prevEnergy) * animDelta;
                var curEnergy = prevEnergy + energyDelta;
                double intensity = curEnergy / 10.0;

                var ang = Math.Atan2(y - 4.5, x - 4.5);
                var col360 = (ang / Math.PI * 180) % 360;
                var col255 = Math.Ceiling(intensity * 255);

                col360 = (col360 + timeStamp / 20) % 360;

                //var color = $"rgba({col255}, {col255}, {col255}, 1)";
                var color = $"hsl({col360:0}, 80%, {intensity * 100.0:0}%)";
                //await Log(color);

                await context.BeginPathAsync();
                await context.ArcAsync(drawX, drawY, OctoRadi, 0, Math.PI * 2);
                await context.ClosePathAsync();
                await context.SetFillStyleAsync(color);
                await context.FillAsync();

                //await context.SetFillStyleAsync("white");
                //await context.FillTextAsync($"{prevEnergy}, {energy}, {intensity}", drawX - 30, drawY);
            });

            await context.SetFillStyleAsync("black");
            var text = $"{step}";
            var measures = await context.MeasureTextAsync(text);
            await context.FillTextAsync(text, OctoRadi - measures.Width / 2, 10 * OctoSize - OctoRadi - 3.5);
        }
        catch(Exception ex)
        {
            await Log("Weird things", ex.Message);
        }
        finally
        {
            await context.RestoreAsync();
        }
        await Task.CompletedTask;
    }

    private async Task Log(string message, params object[] args)
    {
        await runtime.InvokeVoidAsync($"console.log", message, args);
    }

}
