@page "/days/day7"
@inherits blazorgui.Components.CanvasComponentBase
@using common
@using day8

<BECanvas Width="300" Height="400" @ref="canvasReference"></BECanvas>

@code {

    protected Entry[] Entries;
    protected DisplayConnector Connector;
    protected Entry Entry;
    protected Pattern[] Digits;

    Dictionary<char, string> colors = new()
    {
        { 'a', "rgba(240, 22, 16, 1)" },
        { 'b', "rgba(247, 62, 20, 1)" },
        { 'c', "rgba(224, 94, 29, 1)" },
        { 'd', "rgba(247, 130, 20, 1)" },
        { 'e', "rgba(237, 154, 19, 1)" },
        { 'f', "rgba(247, 180, 22, 1)" },
        { 'g', "rgba(255, 210, 20, 1)" },
    };

    string offColor = "rgba(20, 20, 20, 1)";

    private static readonly (int width, int height) DigitSize = (width: 80, height: 140);
    private const int digits = 4;
    private const int outerPadding = 10;
    private const int digitPadding = 10;
    private (int width, int height) DisplaySize = (
        width: outerPadding * 2
               + (digits - 1) * digitPadding
               + digits * DigitSize.width,
        height: outerPadding * 2
                + DigitSize.height
    );

    private static readonly double Spacing = DigitSize.width * .03;
    private static readonly double Size = DigitSize.width * .15;
    private static readonly int MiddleY = DigitSize.height / 2;
    private static readonly double SizeAndSpacing = Size + Spacing;

    double prevTick = 2000;
    double prevUpdate = 0;
    double prevIndexTick = 2000;
    int perTick = 200;
    int hold = 500;

    int renderIndex = 0;
    int connectingIndex = 0;
    int tryIndex = 0;
    int digitIndex = 0;
    bool loadNext = false;
    private IEnumerator<Connections> Enumerator;
    private Connections connections;

    FastNoiseLite noise = new FastNoiseLite();

    private List<Display> results = new List<Display>();
    private double timeStamp;
    private IJSInProcessObjectReference gradient;
    private readonly string onColor = "rgba(255, 0, 0, 1)";

    protected override async Task DrawInitialCanvas()
    {
        noise.SetNoiseType(FastNoiseLite.NoiseType.Perlin);

        Entries = Entry.ParseEntries("day8.sample.txt").ToArray();
        Entry = Entries[connectingIndex];
        Digits = Entry.Digits;
        Connector = new DisplayConnector(Entry);

        Enumerator = Connector.ConnectSlowly().GetEnumerator();
        Enumerator.MoveNext();
        connections = Enumerator.Current;

        tryIndex = -1;

        gradient = await runtime.InvokeAsync<IJSInProcessObjectReference>(
            "createLinearGradient",
            context,
            DisplaySize.width * .4, DisplaySize.height / -1.5, DisplaySize.width * .6, DisplaySize.height * 1.25,
            new[]
            {
                new object[] {0, "rgba(30, 30, 30, 1)"},
                new object[] {1, "rgba(60, 60, 60, 1)"},
            }
            );

        await context.SetFontAsync("18pt \"Bradley Hand ITC\"");

        await DrawScene();
    }

    [JSInvokable]
    public override async ValueTask Update(double timeStamp)
    {
        this.timeStamp = timeStamp;

        if ((timeStamp - perTick) > prevTick)
        {
            prevTick = timeStamp;

            if (loadNext)
            {
                tryIndex = -1;
                connectingIndex++;
                Entry = Entries[connectingIndex];
                Digits = Entry.Digits;
                Connector = new DisplayConnector(Entry);
                Enumerator = Connector.ConnectSlowly().GetEnumerator();
                loadNext = false;
            }

            if (Enumerator.MoveNext())
            {
                tryIndex++;
                connections = Enumerator.Current;
            }
            else if (connectingIndex < Entries.Length - 1)
            {
                results.Add(Connector.Display);
                tryIndex++;
                prevIndexTick = timeStamp;
                connections = Enumerator.Current;
                await DrawScene();
                prevTick += hold;
                loadNext = true;
                return;
            }
            else
            {
                tryIndex = -1;
                Entry = new Entry(new Pattern[0], new Pattern[]
                {
                    new Pattern("abcdefg"),
                    new Pattern("abcdefg"),
                    new Pattern("abcdefg"),
                    new Pattern("abcdefg")
                    });
            }
        }

        await DrawScene();

        await Task.CompletedTask;
    }

    private async Task DrawScene()
    {

        await context.SaveAsync();

        await DrawBackground();

        await context.SaveAsync();

        await context.TranslateAsync(150.5, 150.5);

        renderIndex = connectingIndex;

        //for (renderIndex = 0; renderIndex < 1; renderIndex++)
        //{
        var x = renderIndex % 5;
        var y = (renderIndex - x) / 5;
        await context.SaveAsync();
        //await context.TranslateAsync(x * (DisplaySize.width + 30), y * (DisplaySize.height + 30));
        await DrawDisplay();
        await context.RestoreAsync();
        //}

        await context.RestoreAsync();

        await DrawTextLog();

        await context.RestoreAsync();
    }

    private async Task DrawTextLog()
    {
        try
        {
            await context.SaveAsync();
            await context.TranslateAsync(550, 180);
            await context.SetFillStyleAsync("white");
            if (results.Any())
            {
                var textDiff = (timeStamp - prevIndexTick);
                var delta = Math.Max(Math.Min((textDiff - hold) / (perTick * 2 + hold), 1), 0);
                var total = "Total: " + results.Select(x => x.Number).Sum().ToString("n0");
                var totLength = (int) Math.Ceiling(total.Length * delta);
                await context.FillTextAsync(total.Substring(0, totLength), 0, 0);
                var lineHeight = 28;
                for (var i = results.Count - 1; i >= 0; i--)
                {
                    var text = results[i].ToString();
                    if (i == results.Count - 1)
                    {
                        delta = Math.Min(textDiff / hold, 1);
                        var length = (int) Math.Ceiling(text.Length * delta);
                        text = text.Substring(0, length);
                    }

                    await context.FillTextAsync(text, 0, lineHeight + (results.Count * lineHeight) - i * lineHeight);
                }
            }
        }
        catch (Exception ex)
        {
            await runtime.InvokeVoidAsync("console.log", ex.Message + (results != null));
        }
        finally
        {
            await context.RestoreAsync();
        }
    }

    private async Task DrawDisplay()
    {
        await context.SetFillStyleAsync(gradient);
        await context.FillRectAsync(0, 0, DisplaySize.width, DisplaySize.height);

        await context.SaveAsync();

        await context.TranslateAsync(outerPadding, outerPadding);

        Connections renderConnections;
        if (renderIndex == connectingIndex)
        {
            renderConnections = connections;
        }
        else if (renderIndex < connectingIndex)
        {
            renderConnections = results[renderIndex].Connections;
        }
        else
        {
            renderConnections = (a:'a', b:'b', c:'c', d:'d', e:'e', f:'f', g:'g');
        }

        var entry = Entries[renderIndex];
        for (var i = 0; i < entry.Digits.Length; i++)
        {
            digitIndex = i;
            var digit = entry.Digits[i];
            await DrawA(digit.Contains(renderConnections.a));
            await DrawB(digit.Contains(renderConnections.b));
            await DrawC(digit.Contains(renderConnections.c));
            await DrawD(digit.Contains(renderConnections.d));
            await DrawE(digit.Contains(renderConnections.e));
            await DrawF(digit.Contains(renderConnections.f));
            await DrawG(digit.Contains(renderConnections.g));

            await context.TranslateAsync(digitPadding + DigitSize.width, 0);
        }

        await context.RestoreAsync();
    }

    private string GetColor(int connection, bool @on)
    {
        Func<string> flicker = () =>
        {
            //return onColor;

            var addToX = digitIndex * 256;
            var addToY = renderIndex * 1000 + connection * 16;
            return "rgba(" + (64 + (int) (191 * noise.GetNoise((float) timeStamp + addToX, addToX + addToY))) + ", 0, 0, 1)";
        };
        if (renderIndex < connectingIndex)
        {
            return on ? onColor : offColor;
        }
        if (renderIndex > connectingIndex)
        {
            return flicker();
        }
        return on
            ? connection >= tryIndex
                ? flicker()
                : onColor
            : offColor;
    }

    static readonly double gInnerX = DigitSize.width - Spacing;
    static readonly double gInnerY = DigitSize.height - Size;
    static readonly double gInnerXMinusSize = gInnerX - Size;
    private async Task DrawG(bool on = true)
    {
        await context.SetFillStyleAsync(GetColor(6, on));
        await context.BeginPathAsync();
        await context.MoveToAsync(Spacing, DigitSize.height);
        await context.LineToAsync(gInnerX, DigitSize.height);
        await context.LineToAsync(gInnerXMinusSize, gInnerY);
        await context.LineToAsync(SizeAndSpacing, gInnerY);
        await context.LineToAsync(Spacing, DigitSize.height);
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    static readonly double middleYPlusSpace = MiddleY + Spacing;
    static readonly double fInnerY = DigitSize.height - Spacing;
    static readonly double fInnerX = DigitSize.width - Size;
    private async Task DrawF(bool on = true)
    {
        await context.SetFillStyleAsync(GetColor(5, on));
        await context.BeginPathAsync();
        await context.MoveToAsync(DigitSize.width, middleYPlusSpace);
        await context.LineToAsync(fInnerX, middleYPlusSpace + Size);
        await context.LineToAsync(fInnerX, fInnerY - Size);
        await context.LineToAsync(DigitSize.width, fInnerY);
        await context.LineToAsync(DigitSize.width, middleYPlusSpace);
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    double spacedMiddleY = MiddleY + Spacing;
    double innerY = DigitSize.height - Spacing;
    private async Task DrawE(bool on = true)
    {
        await context.SetFillStyleAsync(GetColor(4, on));
        await context.BeginPathAsync();
        await context.MoveToAsync(0, spacedMiddleY);
        await context.LineToAsync(Size, spacedMiddleY + Size);
        await context.LineToAsync(Size, innerY - Size);
        await context.LineToAsync(0, innerY);
        await context.LineToAsync(0, spacedMiddleY);
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    double spacingAndSize = Spacing + Size;
    double middleYMinSize = MiddleY - Size;
    double middleYPlusSize = MiddleY + Size;
    private async Task DrawD(bool on = true)
    {
        await context.SetFillStyleAsync(GetColor(3, on));
        await context.BeginPathAsync();
        await context.MoveToAsync(Spacing, MiddleY);
        await context.LineToAsync(spacingAndSize, middleYMinSize);
        await context.LineToAsync(DigitSize.width - spacingAndSize, middleYMinSize);
        await context.LineToAsync(DigitSize.width - Spacing, MiddleY);
        await context.LineToAsync(DigitSize.width - spacingAndSize, middleYPlusSize);
        await context.LineToAsync(spacingAndSize, middleYPlusSize);
        await context.LineToAsync(Spacing, MiddleY);
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    private async Task DrawC(bool on = true)
    {
        await context.SetFillStyleAsync(GetColor(2, on));
        await context.BeginPathAsync();
        await context.MoveToAsync(DigitSize.width, Spacing);
        var innerX = DigitSize.width - Size;
        await context.LineToAsync(innerX, Spacing + Size);
        await context.LineToAsync(innerX, MiddleY - Spacing - Size);
        await context.LineToAsync(DigitSize.width, MiddleY - Spacing);
        await context.LineToAsync(DigitSize.width, Spacing);
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    private async Task DrawB(bool on = true)
    {
        await context.SetFillStyleAsync(GetColor(1, on));
        await context.BeginPathAsync();
        await context.MoveToAsync(0, Spacing);
        await context.LineToAsync(Size, Spacing + Size);
        await context.LineToAsync(Size, MiddleY - Spacing - Size);
        await context.LineToAsync(0, MiddleY - Spacing);
        await context.LineToAsync(0, Spacing);
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    private async Task DrawA(bool on = true)
    {
        await context.SetFillStyleAsync(GetColor(0, on));
        await context.BeginPathAsync();
        await context.MoveToAsync(Spacing, 0);
        await context.LineToAsync(DigitSize.width - Spacing, 0);
        await context.LineToAsync(DigitSize.width - Size - Spacing, Size);
        await context.LineToAsync(SizeAndSpacing, Size);
        await context.LineToAsync(Spacing, 0);
        await context.ClosePathAsync();
        await context.FillAsync();
    }

    private async Task DrawBackground()
    {
        await context.SetFillStyleAsync("black");
        await context.FillRectAsync(0, 0, dimensions.Width, dimensions.Height);
    }


}
