@page "/days/day1"
@using day1
@using common
@inject IJSRuntime runtime;

<BECanvas Width="300" Height="400" @ref="canvasReference"></BECanvas>

@code {

    protected BECanvasComponent canvasReference;
    private Canvas2DContext context;

    protected WindowDimension dimensions;
    protected int[] Measures;
    protected int Index;
    protected double RayRatio;
    protected double IndexRatio;

    private CommonShapes commonShapes;

    protected override async Task OnInitializedAsync()
    {
        Measures = Resources.GetResourceLines(typeof(Measuring_Depth), "day1.p1.txt").Select(x => Convert.ToInt32(x)).ToArray();

        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dimensions = await runtime.InvokeAsync<WindowDimension>("containerSize");
            var max = Measures.Max();
            RayRatio = (double)dimensions.Height / max;
            IndexRatio = (double) dimensions.Width / Measures.Length;

            context = await canvasReference.CreateCanvas2DAsync();

            commonShapes = new CommonShapes(context, dimensions, runtime);

            await commonShapes.DrawBackground();

            var centerY = dimensions.Height / 2;
            var subX = dimensions.Width * .2;
            var subY = dimensions.Height * .2;

            await context.SaveAsync();
            await context.TranslateAsync(dimensions.Width * 0.2, dimensions.Height * 0.2);
            await commonShapes.DrawSubmarine();
            await context.RestoreAsync();

            await runtime.InvokeVoidAsync("init", DotNetObjectReference.Create(this));

            StateHasChanged();
        }
    }

    [JSInvokable]
    public async ValueTask Update(double timeStamp)
    {
        Index = (int)Math.Floor(timeStamp / 50);
        var subX = dimensions.Width * .2;
        var subTop = dimensions.Height * .2;
        if (Index < Measures.Length)
        {
            var x = 2 * Index;
            await context.BeginPathAsync();
            await context.SetStrokeStyleAsync("rgba(255, 30, 30, 0.2)");
            await context.MoveToAsync(subX, subTop + 55);
            await context.LineToAsync(Index * IndexRatio * .9, subTop + 55 + Measures[Index] * RayRatio * .7);
            await context.StrokeAsync();
            StateHasChanged();
        }

        await Task.CompletedTask;
    }

}
